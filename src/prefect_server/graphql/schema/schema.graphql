type Query {
  hello: String
  reference_data: reference_data
  api: api_info
}

type Mutation {

  # ------------------------------------------------------
  # schedules
  # ------------------------------------------------------

  """
  Mark a flow's schedule as active, indicating that the Prefect scheduler should
  automatically create new runs for this flow.
  """
  set_schedule_active(input: set_schedule_active_input!): success_payload

  """
  Mark a flow's schedule as inactive, indicating that the Prefect scheduler should not
  automatically creating new runs for this flow. Any existing auto-scheduled runs that have
  not started will be deleted.
  """
  set_schedule_inactive(input: set_schedule_inactive_input!): success_payload

  # ------------------------------------------------------
  # runs
  # ------------------------------------------------------

  "Create a new flow run."
  create_flow_run(input: create_flow_run_input!): flow_run_id_payload

  """
  Create a new task run, if it doesn't exist already. This is useful when dealing with dynamic
  task runs, such as those created by mapping, when it is not known if the task run has been
  attempted already.
  """
  get_or_create_task_run(
    input: get_or_create_task_run_input!
  ): task_run_id_payload

  "Gets or creates all mapped task run children for a parent task run."
  get_or_create_mapped_task_run_children(
    input: get_or_create_mapped_task_run_children_input!
  ): get_or_create_mapped_task_run_children_payload

  "Update a flow run's heartbeat. This indicates the flow run is alive and is called automatically by Prefect Core."
  update_flow_run_heartbeat(
    input: update_flow_run_heartbeat_input!
  ): success_payload

  "Update a task run's heartbeat. This indicates the task run is alive and is called automatically by Prefect Core."
  update_task_run_heartbeat(
    input: update_task_run_heartbeat_input!
  ): success_payload

  "Delete a flow run."
  delete_flow_run(input: delete_flow_run_input!): success_payload

  get_runs_in_queue(input: get_runs_in_queue_input!): runs_in_queue_payload

  # ------------------------------------------------------
  # cloud hooks
  # ------------------------------------------------------

  "Create a new hook for state change notifications."
  create_cloud_hook(input: create_cloud_hook_input!): cloud_hook_id_payload

  "Send a test event to your webhook."
  test_cloud_hook(input: test_cloud_hook_input!): success_payload

  "Delete a cloud hook."
  delete_cloud_hook(input: delete_cloud_hook_input!): success_payload

  "Activate a cloud hook."
  set_cloud_hook_active(input: set_cloud_hook_active_input!): success_payload

  "Deactivate a cloud hook."
  set_cloud_hook_inactive(
    input: set_cloud_hook_inactive_input!
  ): success_payload
}

# ------------------------------------------------------
# schedule inputs
# ------------------------------------------------------

input set_schedule_active_input {
  "A flow ID whose schedule will be set to active"
  flow_id: UUID!
}

input set_schedule_inactive_input {
  "A flow ID whose schedule will be set to active"
  flow_id: UUID!
}

# ------------------------------------------------------
# run inputs
# ------------------------------------------------------

input create_flow_run_input {
  "The ID of the flow to schedule a run for"
  flow_id: UUID
  "A JSON payload specifying parameter values for any parameters in this flow"
  parameters: JSON
  "A JSON payload of key / value pairs to be placed in Prefect context for this run"
  context: JSON
  "An optional start time to schedule this run for - if not provided, will be scheduled immediately"
  scheduled_start_time: DateTime
  "An optional idempotency key for this run - if provided, multiple calls with this same key will not produce additional runs"
  idempotency_key: String
  "An optional name to provide this run - useful for searching in the UI or crafting GraphQL queries"
  flow_run_name: String
  "The version group to schedule a run for - if provided, the unique unarchived version in this version group will be run; this input is useful as a stable API for running a regularly updated flow"
  version_group_id: String
}

input get_or_create_task_run_input {
  flow_run_id: UUID!
  task_id: UUID!
  map_index: Int
}

input get_or_create_mapped_task_run_children_input {
  flow_run_id: UUID!
  task_id: UUID!
  max_map_index: Int!
}

input update_flow_run_heartbeat_input {
  flow_run_id: UUID!
}

input update_task_run_heartbeat_input {
  task_run_id: UUID!
}

input get_runs_in_queue_input {
  tenant_id: UUID!
  before: DateTime
  labels: [String!]
}

input delete_flow_run_input {
  flow_run_id: UUID!
}

# ------------------------------------------------------
# cloud hook inputs
# ------------------------------------------------------

input create_cloud_hook_input {
  tenant_id: UUID!
  type: cloud_hook_type!
  name: String
  version_group_id: String
  states: [String!]!
  config: JSON
}

input test_cloud_hook_input {
  cloud_hook_id: UUID!
  flow_run_id: UUID
  state_type: test_cloud_hook_state_type
}

input delete_cloud_hook_input {
  cloud_hook_id: UUID!
}

input set_cloud_hook_active_input {
  cloud_hook_id: UUID!
}

input set_cloud_hook_inactive_input {
  cloud_hook_id: UUID!
}

# ------------------------------------------------------
# Payloads (Assorted)
# ------------------------------------------------------

type success_payload {
  "A boolean specifying whether this mutation was successful"
  success: Boolean
  "If populated, contains an error message explaining what went wrong with the mutation"
  error: String
}

type flow_id_payload {
  id: UUID
}

type flow_run_id_payload {
  id: UUID
}

type task_run_id_payload {
  id: UUID
}

type get_or_create_mapped_task_run_children_payload {
  ids: [UUID!]
}

type runs_in_queue_payload {
  flow_run_ids: [String!]
}

type cloud_hook_id_payload {
  id: UUID
}

"Reference data."
type reference_data {
  state_hierarchy: JSON!
  state_info: JSON!
}

type api_info {
  backend: String
  mode: String
  version: String
  release_timestamp: String
}

# ------------------------------------------------------
# Enums
# ------------------------------------------------------

enum log_level {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum cloud_hook_type {
  PAGERDUTY
  SLACK_WEBHOOK
  TWILIO
  WEBHOOK
  PREFECT_MESSAGE
}

enum test_cloud_hook_state_type {
  SCHEDULED
  SUBMITTED
  SUCCESS
  RUNNING
  FAILED
}
